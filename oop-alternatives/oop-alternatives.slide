I Object!
Alternatives to the popular Object-Oriented Programming paradigm
25 Jun 2015

Nathan Moos
Backend Rockstar Engineer, Stratos
moosnat@umich.edu
https://moosingin3space.github.io
@moosingin3space

* Programming problems, in general

- Shared, mutable state
- End of the Moore's Law "free lunch"
- Managing complexity
- Too much code

* What is OOP good for?

- Data hiding or encapsulation
- Polymorphism or the reuse of functions in different contexts
- Abstraction
- Maintenance

* What is OOP associated with?

- Static typing
- User Interfaces and Game Engines

* Encapsulation

OOP: Private variables and functions

.code private-data-example.java

* Defeated by

Threading! There is no protection from unanticpated re-ordering of updates
due to non-deterministic multicore thred execution!

.code threading-breaks-encapsulation.java

* Encapsulation

Alternative: Modules

.code modules-example.go

Note that there's no mutable state at the module level.

* Polymorphism

OOP: Classes

.code classes-example.java

* Defeated by

Inflexibility and high ceremony.

.code classes-are-inflexible.java

* Polymorphism

Alternative: Dynamic Typing

.code dynamic-typing.js

Very low-ceremony, but requires a lot of testing to verify that it works!
We can do better...

* Polymorphism

Alternative: Typeclasses

.code typeclasses-example.hs

Less ceremony and slightly more malleable, but retains the compiler's ability
to check for bugs.

* Polymorphism

Alternative: Multiple dispatch

.code multimethods-example.clj

Powerful way to switch on type or another attribute.

* Polymorphism

Alternative: Separation of data and functions, combined with structural
sub-typing

.code interfaces-example.go

Very low ceremony and malleable.

* Abstraction

Alternative: FP concepts

.code monads-example.hs

Notice how the _monadic chain_ operator (`>>=`) could be used in vastly
different situations. Functional programming enables more elegant abstractions.

* Maintenance

Complexity damns you twice: it takes more effort to understand complex code,
and it needs more maintenance.

OOP tends to have high ceremony: see classes, dependency injection, etc.

* Notes on Typing

* User Interface and Game Engines

Alan Kay, inventor of OOP, believed it would lay the foundation for an elegant
user interface.

OOP user interfaces require components to maintain state, _independent_ of the
application state. Usually, this is unnecessary duplication

In FRP, components are just functions that take all data needed to generate the
representation. No state outside of the app state.
