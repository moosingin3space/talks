I Object!
Alternatives to the popular Object-Oriented Programming paradigm
25 Jun 2015

Nathan Moos
moosnat@umich.edu
https://moosingin3space.github.io
@moosingin3space

* Disclaimer

I will be using a lot of languages!

- Java
- Go
- Clojure
- Haskell
- JavaScript

* Programming problems, in general

- Shared, mutable state
- End of the Moore's Law "free lunch", but added complexity involved in parallelism
- Managing complexity
- High-ceremony code

* What is OOP good for? (What the Internet says)

- Data hiding or encapsulation
- Polymorphism or the reuse of functions in different contexts
- Abstraction
- Maintenance

* What is OOP associated with?

- Static typing
- User Interfaces 
- Game Engines

* Encapsulation

OOP: Private variables and functions
Problems arise with threading! There is no protection from unanticpated
re-ordering of updates due to non-deterministic multicore thread execution!
(Java)

.code threading-breaks-encapsulation.java

* Encapsulation

Alternative: Modules and pure functions
(Go)

.code modules-example.go

Note that there's no mutable state at the module level.

* Polymorphism

OOP: Classes
Example: A sell price is a price. So is a buy price. A price is a number. This
suggests inheritance. Can I model this with sub-classing?

* Defeated by

Inflexibility and high ceremony.
(Java)

.code classes-are-inflexible.java

* Polymorphism

Alternative: Dynamic Typing (JavaScript)

.code dynamic-typing.js

* Polymorphism

Alternative: Algebraic Data Types
(Haskell)

.code typeclasses-example.hs

Less ceremony and slightly more malleable, but retains the compiler's ability
to check for bugs.

* Polymorphism

Alternative: Multiple dispatch
(Clojure)

.code multimethods-example.clj

Powerful way to switch on type or another attribute.

* Polymorphism

Alternative: Separation of data and functions, structural sub-typing (Go)

.code interfaces-example.go

Low-ceremony and malleable.

* Abstraction

(Java)

.code map-reduce-with-arrays.java

* Abstraction

Alternative: FP concepts

(Haskell)

.code map-reduce-example.hs

Notice how maps and folds can be used to perform all of these similar
operations.

* Maintenance

Complexity damns you twice: it takes more effort to understand complex code,
and it needs more maintenance.

OOP tends to have high ceremony: see classes, dependency injection, etc.

* Parallellism

OOP: Locking
(Java)

.code locking-example.java

Not only is this an increase in ceremony, but it also performs badly.

* Parallellism

Alternative: Software-transactional memory
(Clojure)

.code stm-example.clj

STM enables global state to be modified safely.

* Typing

In general, any programming paradigm can work with any typing system. However,
the inflexibility of OOP's polymorphism restricts the most powerful static
typing systems to non-OOP languages.

By contrast
- Erlang and Clojure have dynamic typing systems
- Haskell, Scala, and OCaml have static typing systems

* User Interface and Game Engines

Alan Kay, inventor of OOP, believed it would lay the foundation for an elegant
user interface.

OOP user interfaces require components to maintain state, _independent_ of the
application state. Usually, this is unnecessary duplication.

In FRP, components are just functions that take all data needed to generate the
representation. No state outside of the app state.

* FRP Loop Diagram

.image https://raw.githubusercontent.com/facebook/flux/master/docs/img/flux-diagram-white-background.png 429 858

Note the one-way flow of data.

* What if we don't have a choice?

* Web frontend: JavaScript

- Module pattern (Browserify, Require.js)
- Dynamic polymorphism
- Underscore or Lodash
- FRP (React.js, Mercury)

* Web frontend: compile-to-JavaScript

- TypeScript: structural sub-typing with its `interface` types
- PureScript: Haskell written in JavaScript
- ClojureScript: Clojure compiled to JavaScript
- Elm: Haskell-style code, FRP, complete abstraction over DOM

* Always applicable

- Prefer functions to classes
- Classes (or namespaces) as modules
- Immutability
- Document side effects _clearly_
- Procedural code with a module system

* Why do we care?

- We want code that we can quickly iterate on
- We want code that is clear in its intent
- We want code that doesn't punish us for taking breaks
